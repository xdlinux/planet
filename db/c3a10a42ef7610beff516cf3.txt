<h1 id="Unity-SRP-全屏-Blit-原理">Unity SRP 全屏 Blit 原理<a class="headerlink" href="#Unity-SRP-全屏-Blit-原理" title="Permanent link">&para;</a></h1>
<!-- more -->

<p>一般我们做 Blit 用的都是两个三角形，或者一个 Quad。SRP 只用了一个三角形。</p>
<p><img alt="示例图" src="../../../obsidian-vault/attachments/Pasted%20image%2020241014124509.png" /></p>
<p>三角形顶点的齐次坐标是在 Vertex Shader 里根据 Vertex ID 计算的。三角形 Mesh 中 <code>v0</code>、<code>v1</code>、<code>v2</code> 三个顶点的坐标可以随便给。</p>
<p>源码：<a href="https://github.com/Unity-Technologies/Graphics/blob/master/Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl">Graphics/Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl at master · Unity-Technologies/Graphics (github.com)</a>。</p>
<div class="highlight"><pre><span></span><code><span class="c1">// Generates a triangle in homogeneous clip space, s.t.</span>
<span class="c1">// v0 = (-1, -1, 1), v1 = (3, -1, 1), v2 = (-1, 3, 1).</span>
<span class="kt">float2</span><span class="w"> </span><span class="n">GetFullScreenTriangleTexCoord</span><span class="p">(</span><span class="kt">uint</span><span class="w"> </span><span class="n">vertexID</span><span class="p">)</span>
<span class="p">{</span>
<span class="cp">#if UNITY_UV_STARTS_AT_TOP</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kt">float2</span><span class="p">((</span><span class="n">vertexID</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mf">1.0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">vertexID</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">2</span><span class="p">));</span>
<span class="cp">#else</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kt">float2</span><span class="p">((</span><span class="n">vertexID</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="n">vertexID</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span>
<span class="cp">#endif</span>
<span class="p">}</span>

<span class="kt">float4</span><span class="w"> </span><span class="n">GetFullScreenTriangleVertexPosition</span><span class="p">(</span><span class="kt">uint</span><span class="w"> </span><span class="n">vertexID</span><span class="p">,</span><span class="w"> </span><span class="kt">float</span><span class="w"> </span><span class="n">z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UNITY_NEAR_CLIP_VALUE</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="c1">// note: the triangle vertex position coordinates are x2 so the returned UV coordinates are in range -1, 1 on the screen.</span>
<span class="w">    </span><span class="kt">float2</span><span class="w"> </span><span class="n">uv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kt">float2</span><span class="p">((</span><span class="n">vertexID</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="n">vertexID</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span>
<span class="w">    </span><span class="kt">float4</span><span class="w"> </span><span class="n">pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kt">float4</span><span class="p">(</span><span class="n">uv</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mf">2.0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="p">,</span><span class="w"> </span><span class="mf">1.0</span><span class="p">);</span>
<span class="cp">#ifdef UNITY_PRETRANSFORM_TO_DISPLAY_ORIENTATION</span>
<span class="w">    </span><span class="n">pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ApplyPretransformRotation</span><span class="p">(</span><span class="n">pos</span><span class="p">);</span>
<span class="cp">#endif</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">pos</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><hr />
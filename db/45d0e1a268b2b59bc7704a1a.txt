<h1 id="集成-RenderDoc">集成 RenderDoc<a class="headerlink" href="#集成-RenderDoc" title="Permanent link">&para;</a></h1>
<!-- more -->

<p>实现像 Unity 一样，直接从自己程序里调起 RenderDoc 截帧的功能。参考文档：<a href="https://renderdoc.org/docs/in_application_api.html">In-application API — RenderDoc documentation</a>。</p>
<h2 id="引入头文件">引入头文件<a class="headerlink" href="#引入头文件" title="Permanent link">&para;</a></h2>
<p>在 RenderDoc 的安装目录里，有 <code>renderdoc_app.h</code>，复制进项目即可。然后，写一个类简单封装一下。</p>
<div class="highlight"><pre><span></span><code><span class="k">class</span><span class="w"> </span><span class="nc">RenderDoc</span><span class="w"> </span><span class="k">final</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
<span class="w">    </span><span class="k">static</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="n">IsLoaded</span><span class="p">();</span>
<span class="w">    </span><span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">Load</span><span class="p">();</span>
<span class="w">    </span><span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">CaptureSingleFrame</span><span class="p">();</span>
<span class="w">    </span><span class="k">static</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="nf">GetNumCaptures</span><span class="p">();</span>
<span class="w">    </span><span class="k">static</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int32_t</span><span class="p">,</span><span class="w"> </span><span class="kt">int32_t</span><span class="p">,</span><span class="w"> </span><span class="kt">int32_t</span><span class="o">&gt;</span><span class="w"> </span><span class="n">GetVersion</span><span class="p">();</span>
<span class="w">    </span><span class="k">static</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="nf">GetLibraryPath</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div>
<p>cpp 文件里</p>
<div class="highlight"><pre><span></span><code><span class="k">static</span><span class="w"> </span><span class="n">RENDERDOC_API_1_5_0</span><span class="o">*</span><span class="w"> </span><span class="n">g_Api</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">nullptr</span><span class="p">;</span>
</code></pre></div>
<h2 id="加载">加载<a class="headerlink" href="#加载" title="Permanent link">&para;</a></h2>
<p><mark>在创建图形设备前</mark>，枚举常用的 RenderDoc 安装位置，动态加载安装目录里的 <code>renderdoc.dll</code>。</p>
<div class="highlight"><pre><span></span><code><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="nf">RenderDoc::GetLibraryPath</span><span class="p">()</span><span class="w"> </span><span class="k">const</span>
<span class="p">{</span>
<span class="w">    </span><span class="c1">// 常用安装位置，可以多枚举几个</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="s">&quot;C:</span><span class="se">\\</span><span class="s">Program Files</span><span class="se">\\</span><span class="s">RenderDoc</span><span class="se">\\</span><span class="s">renderdoc.dll&quot;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>如果 <code>LoadLibrary</code> 前，<code>renderdoc.dll</code> 已经被加载，说明用户是用 RenderDoc 启动 App 的，就不需要再手动 load 了。</p>
<div class="highlight"><pre><span></span><code><span class="kt">bool</span><span class="w"> </span><span class="nf">RenderDoc::IsLoaded</span><span class="p">()</span>
<span class="p">{</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">g_Api</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="k">nullptr</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">RenderDoc::Load</span><span class="p">()</span>
<span class="p">{</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">IsLoaded</span><span class="p">())</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="k">return</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="c1">// 如果使用 RenderDoc 启动 App 的话，不重复加载 dll</span>
<span class="w">    </span><span class="n">HMODULE</span><span class="w"> </span><span class="n">hModule</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">GetModuleHandleA</span><span class="p">(</span><span class="s">&quot;renderdoc.dll&quot;</span><span class="p">);</span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">hModule</span><span class="p">)</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="n">hModule</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LoadLibraryA</span><span class="p">(</span><span class="n">GetLibraryPath</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">hModule</span><span class="p">)</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="n">DEBUG_LOG_ERROR</span><span class="p">(</span><span class="s">&quot;Failed to load RenderDoc library&quot;</span><span class="p">);</span>
<span class="w">        </span><span class="k">return</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="k">auto</span><span class="w"> </span><span class="n">RENDERDOC_GetAPI</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">pRENDERDOC_GetAPI</span><span class="o">&gt;</span><span class="p">(</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hModule</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;RENDERDOC_GetAPI&quot;</span><span class="p">));</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">RENDERDOC_GetAPI</span><span class="p">(</span><span class="n">eRENDERDOC_API_Version_1_5_0</span><span class="p">,</span><span class="w"> </span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">**&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">g_Api</span><span class="p">));</span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ret</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="n">g_Api</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">nullptr</span><span class="p">;</span>
<span class="w">        </span><span class="n">DEBUG_LOG_ERROR</span><span class="p">(</span><span class="s">&quot;Failed to get RenderDoc API. Return Code: %d&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">ret</span><span class="p">);</span>
<span class="w">        </span><span class="k">return</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="n">g_Api</span><span class="o">-&gt;</span><span class="n">MaskOverlayBits</span><span class="p">(</span><span class="n">eRENDERDOC_Overlay_None</span><span class="p">,</span><span class="w"> </span><span class="n">eRENDERDOC_Overlay_None</span><span class="p">);</span><span class="w"> </span><span class="c1">// 不显示 overlay</span>
<span class="w">    </span><span class="n">g_Api</span><span class="o">-&gt;</span><span class="n">SetCaptureKeys</span><span class="p">(</span><span class="k">nullptr</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>在最后，调用 <code>MaskOverlayBits</code> 把 RenderDoc 左上角黑色的 Overlay 信息隐藏掉；调用 <code>SetCaptureKeys</code> 把默认的快捷键取消掉。</p>
<h2 id="D3D12-调试层">D3D12 调试层<a class="headerlink" href="#D3D12-调试层" title="Permanent link">&para;</a></h2>
<p>在做 D3D12 开发时，我们通常会开启 D3D12 的调试层，但 RenderDoc 默认情况下禁用了 API Validation 和 Debug Output，使得 D3D12 的调试层失去作用。</p>
<p>在加载 RenderDoc 后，调用下面的方法可以解决。<sup id="fnref:1"><a class="footnote-ref" href="#fn:1">1</a></sup></p>
<div class="highlight"><pre><span></span><code><span class="n">g_Api</span><span class="o">-&gt;</span><span class="n">SetCaptureOptionU32</span><span class="p">(</span><span class="n">eRENDERDOC_Option_APIValidation</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span>
<span class="n">g_Api</span><span class="o">-&gt;</span><span class="n">SetCaptureOptionU32</span><span class="p">(</span><span class="n">eRENDERDOC_Option_DebugOutputMute</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span>
</code></pre></div>
<p>另外，RenderDoc 会使 <code>ID3D12InfoQueue1</code> 失去作用，因为它只提供了一个 dummy 的实现。<sup id="fnref:2"><a class="footnote-ref" href="#fn:2">2</a></sup></p>
<div class="highlight"><pre><span></span><code><span class="c1">// give every impression of working but do nothing.</span>
<span class="c1">// Just allow the user to call functions so that they don&#39;t</span>
<span class="c1">// have to check for E_NOINTERFACE when they expect an infoqueue to be there</span>
<span class="k">struct</span><span class="w"> </span><span class="nc">DummyID3D12InfoQueue</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="k">public</span><span class="w"> </span><span class="n">ID3D12InfoQueue1</span>
<span class="p">{</span>
<span class="w">    </span><span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div>
<p>RenderDoc 会使 D3D12 的调试层变得不完整，它本身又有一些额外的开销，所以不建议每次启动应用时都加载 RenderDoc。</p>
<p>可以像 Unity 一样，提供一个加载按钮，但是加载 RenderDoc 后需要重新创建图形设备，整个过程是比较麻烦的。也可以提供一个命令行参数 <code>-load-renderdoc</code>，仅在有该参数的情况下加载 RenderDoc，修改 VisualStudio 调试器的启动参数就行。</p>
<h2 id="截帧">截帧<a class="headerlink" href="#截帧" title="Permanent link">&para;</a></h2>
<div class="highlight"><pre><span></span><code><span class="kt">void</span><span class="w"> </span><span class="nf">RenderDoc::CaptureSingleFrame</span><span class="p">()</span>
<span class="p">{</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">IsLoaded</span><span class="p">())</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="k">return</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="n">g_Api</span><span class="o">-&gt;</span><span class="n">TriggerCapture</span><span class="p">();</span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">g_Api</span><span class="o">-&gt;</span><span class="n">IsTargetControlConnected</span><span class="p">())</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="n">g_Api</span><span class="o">-&gt;</span><span class="n">ShowReplayUI</span><span class="p">();</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="k">else</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="n">g_Api</span><span class="o">-&gt;</span><span class="n">LaunchReplayUI</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="k">nullptr</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>调用这个方法后，会立即截一帧，然后打开 RenderDoc 窗口，就像 Unity 一样。</p>
<h2 id="附加信息">附加信息<a class="headerlink" href="#附加信息" title="Permanent link">&para;</a></h2>
<p>获取截帧和版号信息。</p>
<div class="highlight"><pre><span></span><code><span class="kt">uint32_t</span><span class="w"> </span><span class="nf">RenderDoc::GetNumCaptures</span><span class="p">()</span>
<span class="p">{</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">IsLoaded</span><span class="p">())</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">g_Api</span><span class="o">-&gt;</span><span class="n">GetNumCaptures</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int32_t</span><span class="p">,</span><span class="w"> </span><span class="kt">int32_t</span><span class="p">,</span><span class="w"> </span><span class="kt">int32_t</span><span class="o">&gt;</span><span class="w"> </span><span class="n">RenderDoc</span><span class="o">::</span><span class="n">GetVersion</span><span class="p">()</span>
<span class="p">{</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">IsLoaded</span><span class="p">())</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">make_tuple</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">verMajor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">verMinor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">verPatch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">    </span><span class="n">g_Api</span><span class="o">-&gt;</span><span class="n">GetAPIVersion</span><span class="p">(</span><span class="o">&amp;</span><span class="n">verMajor</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">verMinor</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">verPatch</span><span class="p">);</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">make_tuple</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int32_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">verMajor</span><span class="p">),</span><span class="w"> </span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int32_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">verMinor</span><span class="p">),</span><span class="w"> </span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int32_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">verPatch</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>
<h2 id="快捷键和-UI">快捷键和 UI<a class="headerlink" href="#快捷键和-UI" title="Permanent link">&para;</a></h2>
<p>这部分用 ImGui 实现，使用快捷键 <code>Alt+C</code> 就能截帧。</p>
<p><img alt="UI 效果" src="../../../obsidian-vault/attachments/Pasted%20image%2020240824233322.png" /></p>
<div class="highlight"><pre><span></span><code><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">BeginMainMenuBar</span><span class="p">())</span>
<span class="p">{</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">Shortcut</span><span class="p">(</span><span class="n">ImGuiMod_Alt</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ImGuiKey_C</span><span class="p">,</span><span class="w"> </span><span class="n">ImGuiInputFlags_RouteAlways</span><span class="p">))</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="n">RenderDoc</span><span class="o">::</span><span class="n">CaptureSingleFrame</span><span class="p">();</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">BeginMenu</span><span class="p">(</span><span class="s">&quot;RenderDoc&quot;</span><span class="p">))</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">MenuItem</span><span class="p">(</span><span class="s">&quot;Capture&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Alt+C&quot;</span><span class="p">,</span><span class="w"> </span><span class="k">nullptr</span><span class="p">,</span><span class="w"> </span><span class="n">RenderDoc</span><span class="o">::</span><span class="n">IsLoaded</span><span class="p">()))</span>
<span class="w">        </span><span class="p">{</span>
<span class="w">            </span><span class="n">RenderDoc</span><span class="o">::</span><span class="n">CaptureSingleFrame</span><span class="p">();</span>
<span class="w">        </span><span class="p">}</span>

<span class="w">        </span><span class="n">ImGui</span><span class="o">::</span><span class="n">SeparatorText</span><span class="p">(</span><span class="s">&quot;Information&quot;</span><span class="p">);</span>

<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">BeginMenu</span><span class="p">(</span><span class="s">&quot;Library&quot;</span><span class="p">))</span>
<span class="w">        </span><span class="p">{</span>
<span class="w">            </span><span class="n">ImGui</span><span class="o">::</span><span class="n">TextUnformatted</span><span class="p">(</span><span class="n">RenderDoc</span><span class="o">::</span><span class="n">GetLibraryPath</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
<span class="w">            </span><span class="n">ImGui</span><span class="o">::</span><span class="n">EndMenu</span><span class="p">();</span>
<span class="w">        </span><span class="p">}</span>

<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">BeginMenu</span><span class="p">(</span><span class="s">&quot;API Version&quot;</span><span class="p">))</span>
<span class="w">        </span><span class="p">{</span>
<span class="w">            </span><span class="k">auto</span><span class="w"> </span><span class="p">[</span><span class="n">major</span><span class="p">,</span><span class="w"> </span><span class="n">minor</span><span class="p">,</span><span class="w"> </span><span class="n">patch</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">RenderDoc</span><span class="o">::</span><span class="n">GetVersion</span><span class="p">();</span>
<span class="w">            </span><span class="n">ImGui</span><span class="o">::</span><span class="n">Text</span><span class="p">(</span><span class="s">&quot;%d.%d.%d&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">major</span><span class="p">,</span><span class="w"> </span><span class="n">minor</span><span class="p">,</span><span class="w"> </span><span class="n">patch</span><span class="p">);</span>
<span class="w">            </span><span class="n">ImGui</span><span class="o">::</span><span class="n">EndMenu</span><span class="p">();</span>
<span class="w">        </span><span class="p">}</span>

<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ImGui</span><span class="o">::</span><span class="n">BeginMenu</span><span class="p">(</span><span class="s">&quot;Num Captures&quot;</span><span class="p">))</span>
<span class="w">        </span><span class="p">{</span>
<span class="w">            </span><span class="n">ImGui</span><span class="o">::</span><span class="n">Text</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">RenderDoc</span><span class="o">::</span><span class="n">GetNumCaptures</span><span class="p">());</span>
<span class="w">            </span><span class="n">ImGui</span><span class="o">::</span><span class="n">EndMenu</span><span class="p">();</span>
<span class="w">        </span><span class="p">}</span>

<span class="w">        </span><span class="n">ImGui</span><span class="o">::</span><span class="n">EndMenu</span><span class="p">();</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="n">ImGui</span><span class="o">::</span><span class="n">EndMainMenuBar</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p><a href="https://github.com/baldurk/renderdoc/issues/418">d3d debug runtime doesn't work with RenderDoc? · Issue #418 · baldurk/renderdoc (github.com)</a>&#160;<a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:2">
<p><a href="https://github.com/baldurk/renderdoc/blob/v1.x/renderdoc/driver/d3d12/d3d12_device.h">renderdoc/renderdoc/driver/d3d12/d3d12_device.h at v1.x · baldurk/renderdoc (github.com)</a>&#160;<a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
</ol>
</div><hr />